name: build

on:
  push:
  release:
    types: [ published ]

jobs:
  build:
    strategy:
      matrix:
        ui_type: [QWidget]
        platform: [ubuntu-20.04, windows-latest]
        build_type: [RelWithDebInfo, Release]
        qt_version: [6.0.0]
        include:
          - platform: windows-latest
            qtarch: win64_msvc2019_64
      fail-fast: false

    runs-on: ${{ matrix.platform }}
    env:
      _QV2RAY_BUILD_INFO_: "build from Github Action"
      _QV2RAY_BUILD_EXTRA_INFO_: "qt${{ matrix.qt_version }}-${{ github.sha }}-ci.${{ matrix.platform }}"
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true

    steps:
      - name: Checking out sources
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Setup MSVC compiler
        if: matrix.platform == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          toolset: 14.2
          arch: x64
      - name: find
        run:  grep -rni "qv2ray.desktop"
      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master
      - name: Setup Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_version }}
          arch: ${{ matrix.qtarch }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
      - name: Linux - Download Dependencies
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt update
          sudo apt install -y libssl-dev libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0
          sudo apt install -y libprotobuf-dev protobuf-compiler protobuf-c-compiler libgrpc++-dev protobuf-compiler-grpc libcurl4-openssl-dev
      - name: Windows - Download Dependencies
        shell: bash
        if: matrix.platform == 'windows-latest'
        run: |
          cd ./libs
          ./setup-libs.sh windows x64
      - name: Windows - Build
        shell: bash
        if: matrix.platform == 'windows-latest'
        env:
          CC: cl.exe
          CXX: cl.exe
        run: |
          mkdir build
          cd build
          cmake .. -GNinja \
            -DQV2RAY_UI_TYPE=${{ matrix.ui_type }} \
            -DQVMESSOCKET_QT6=ON \
            -DCMAKE_INSTALL_PREFIX=./deployment \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          cmake --build . --parallel $(nproc)
          cmake --install .
          cp -v ./*.pdb ./deployment || true
      - name: Linux - Build
        if: matrix.platform == 'ubuntu-20.04'
        shell: bash
        run: |
          mkdir build
          cd build
          cmake .. -GNinja \
            -DQV2RAY_UI_TYPE=${{ matrix.ui_type }} \
            -DQVMESSOCKET_QT6=ON \
            -DCMAKE_INSTALL_PREFIX=./AppDir/usr \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DQV2RAY_TRANSLATION_PATH=QApplication::applicationDirPath\(\)+"/../share/qv2ray/lang"
          cmake --build . --parallel $(nproc)
          cmake --install .
      - name: Linux - Generating AppImage
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          cd build
          cd AppDir
          mkdir -p ./usr/{lib,optional}/
          mkdir -p ./usr/optional/libstdc++/
          mkdir -p ./usr/optional/libgcc_s/
          wget -c https://github.com/darealshinji/AppImageKit-checkrt/releases/download/continuous/AppRun-patched-x86_64 -O AppRun
          wget -c https://github.com/darealshinji/AppImageKit-checkrt/releases/download/continuous/exec-x86_64.so -O ./usr/optional/exec.so
          chmod a+x AppRun
          cp -fv /usr/lib/x86_64-linux-gnu/libstdc++.so.6 ./usr/optional/libstdc++/
          cp -fv /lib/x86_64-linux-gnu/libgcc_s.so.1 ./usr/optional/libgcc_s/
          cp -fv /usr/lib/x86_64-linux-gnu/{libssl.so.1.1,libcrypto.so.1.1} ./usr/lib/
          cd ..
          wget https://github.com/probonopd/linuxdeployqt/releases/download/6/linuxdeployqt-6-x86_64.AppImage
          chmod +x ./linuxdeployqt-6-x86_64.AppImage
          ./linuxdeployqt-6-x86_64.AppImage AppDir/usr/share/applications/qvmessocket.desktop \
            -unsupported-allow-new-glibc \
            -appimage \
            -no-strip \
            -always-overwrite \
            -extra-plugins=iconengines,imageformats,platforminputcontexts
          mv ./Qvmessocket*.AppImage ./Qvmessocket.AppImage
      - name: Linux - Uploading Artifact
        if: matrix.platform == 'ubuntu-20.04'
        uses: actions/upload-artifact@master
        with:
          name: Qvmessocket-linux-${{ matrix.ui_type }}.${{ matrix.build_type }}.AppImage
          path: build/Qvmessocket.AppImage
      - name: Linux - Upload binaries to release
        uses: svenstaro/upload-release-action@v1-release
        if: github.event_name == 'release' && matrix.platform == 'ubuntu-20.04' && matrix.ui_type == 'QWidget' && matrix.build_type == 'Release'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/Qvmessocket.AppImage
          asset_name: Qvmessocket.${{ steps.get_version.outputs.VERSION }}.Qt6.Linux.AppImage
          tag: ${{ github.ref }}
          overwrite: true
      - name: Windows - Create 7z Release
        if: matrix.platform == 'windows-latest'
        uses: DuckSoft/create-7z-action@v1.0
        with:
          pathSource: ./build/deployment/
          pathTarget: ./release.7z
      - name: Windows - Uploading Artifact
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@master
        with:
          name: Qvmessocket-Windows-${{ matrix.ui_type }}.${{ matrix.build_type }}.7z
          path: release.7z
      - name: Windows - Upload binaries to release
        uses: svenstaro/upload-release-action@v1-release
        if: github.event_name == 'release' && matrix.platform == 'windows-latest' && matrix.ui_type == 'QWidget' && matrix.build_type == 'Release'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: release.7z
          asset_name: Qvmessocket.${{ steps.get_version.outputs.VERSION }}.Qt6.Windows.7z
          tag: ${{ github.ref }}
          overwrite: true
